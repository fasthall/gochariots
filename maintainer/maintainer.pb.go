// Code generated by protoc-gen-go. DO NOT EDIT.
// source: maintainer.proto

/*
Package maintainer is a generated protocol buffer package.

It is generated from these files:
	maintainer.proto

It has these top-level messages:
	RPCRecord
	RPCCausality
	RPCRecords
	RPCReply
	RPCBatchers
	RPCLId
	RPCCaches
	RPCMongos
*/
package maintainer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RPCRecord struct {
	Id        string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Lid       uint32            `protobuf:"varint,2,opt,name=lid" json:"lid,omitempty"`
	Parent    string            `protobuf:"bytes,3,opt,name=parent" json:"parent,omitempty"`
	Timestamp int64             `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Host      uint32            `protobuf:"varint,5,opt,name=host" json:"host,omitempty"`
	Tags      map[string]string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Trace     string            `protobuf:"bytes,7,opt,name=trace" json:"trace,omitempty"`
	// for TOID record
	Toid      uint32        `protobuf:"varint,8,opt,name=toid" json:"toid,omitempty"`
	Causality *RPCCausality `protobuf:"bytes,9,opt,name=causality" json:"causality,omitempty"`
}

func (m *RPCRecord) Reset()                    { *m = RPCRecord{} }
func (m *RPCRecord) String() string            { return proto.CompactTextString(m) }
func (*RPCRecord) ProtoMessage()               {}
func (*RPCRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RPCRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RPCRecord) GetLid() uint32 {
	if m != nil {
		return m.Lid
	}
	return 0
}

func (m *RPCRecord) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *RPCRecord) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RPCRecord) GetHost() uint32 {
	if m != nil {
		return m.Host
	}
	return 0
}

func (m *RPCRecord) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RPCRecord) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

func (m *RPCRecord) GetToid() uint32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *RPCRecord) GetCausality() *RPCCausality {
	if m != nil {
		return m.Causality
	}
	return nil
}

type RPCCausality struct {
	Host uint32 `protobuf:"varint,1,opt,name=host" json:"host,omitempty"`
	Toid uint32 `protobuf:"varint,2,opt,name=toid" json:"toid,omitempty"`
}

func (m *RPCCausality) Reset()                    { *m = RPCCausality{} }
func (m *RPCCausality) String() string            { return proto.CompactTextString(m) }
func (*RPCCausality) ProtoMessage()               {}
func (*RPCCausality) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RPCCausality) GetHost() uint32 {
	if m != nil {
		return m.Host
	}
	return 0
}

func (m *RPCCausality) GetToid() uint32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

type RPCRecords struct {
	Records []*RPCRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *RPCRecords) Reset()                    { *m = RPCRecords{} }
func (m *RPCRecords) String() string            { return proto.CompactTextString(m) }
func (*RPCRecords) ProtoMessage()               {}
func (*RPCRecords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RPCRecords) GetRecords() []*RPCRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type RPCReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *RPCReply) Reset()                    { *m = RPCReply{} }
func (m *RPCReply) String() string            { return proto.CompactTextString(m) }
func (*RPCReply) ProtoMessage()               {}
func (*RPCReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RPCReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RPCBatchers struct {
	Version uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Batcher []string `protobuf:"bytes,2,rep,name=batcher" json:"batcher,omitempty"`
}

func (m *RPCBatchers) Reset()                    { *m = RPCBatchers{} }
func (m *RPCBatchers) String() string            { return proto.CompactTextString(m) }
func (*RPCBatchers) ProtoMessage()               {}
func (*RPCBatchers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RPCBatchers) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RPCBatchers) GetBatcher() []string {
	if m != nil {
		return m.Batcher
	}
	return nil
}

type RPCLId struct {
	Lid uint32 `protobuf:"varint,1,opt,name=lid" json:"lid,omitempty"`
}

func (m *RPCLId) Reset()                    { *m = RPCLId{} }
func (m *RPCLId) String() string            { return proto.CompactTextString(m) }
func (*RPCLId) ProtoMessage()               {}
func (*RPCLId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RPCLId) GetLid() uint32 {
	if m != nil {
		return m.Lid
	}
	return 0
}

type RPCCaches struct {
	Version uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Hosts   []string `protobuf:"bytes,2,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *RPCCaches) Reset()                    { *m = RPCCaches{} }
func (m *RPCCaches) String() string            { return proto.CompactTextString(m) }
func (*RPCCaches) ProtoMessage()               {}
func (*RPCCaches) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RPCCaches) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RPCCaches) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type RPCMongos struct {
	Version uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Hosts   []string `protobuf:"bytes,2,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *RPCMongos) Reset()                    { *m = RPCMongos{} }
func (m *RPCMongos) String() string            { return proto.CompactTextString(m) }
func (*RPCMongos) ProtoMessage()               {}
func (*RPCMongos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RPCMongos) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RPCMongos) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func init() {
	proto.RegisterType((*RPCRecord)(nil), "RPCRecord")
	proto.RegisterType((*RPCCausality)(nil), "RPCCausality")
	proto.RegisterType((*RPCRecords)(nil), "RPCRecords")
	proto.RegisterType((*RPCReply)(nil), "RPCReply")
	proto.RegisterType((*RPCBatchers)(nil), "RPCBatchers")
	proto.RegisterType((*RPCLId)(nil), "RPCLId")
	proto.RegisterType((*RPCCaches)(nil), "RPCCaches")
	proto.RegisterType((*RPCMongos)(nil), "RPCMongos")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Maintainer service

type MaintainerClient interface {
	UpdateMongos(ctx context.Context, in *RPCMongos, opts ...grpc.CallOption) (*RPCReply, error)
	UpdateCaches(ctx context.Context, in *RPCCaches, opts ...grpc.CallOption) (*RPCReply, error)
	ReceiveRecords(ctx context.Context, in *RPCRecords, opts ...grpc.CallOption) (*RPCReply, error)
	UpdateBatchers(ctx context.Context, in *RPCBatchers, opts ...grpc.CallOption) (*RPCReply, error)
	TOIDReceiveRecords(ctx context.Context, in *RPCRecords, opts ...grpc.CallOption) (*RPCReply, error)
	TOIDUpdateBatchers(ctx context.Context, in *RPCBatchers, opts ...grpc.CallOption) (*RPCReply, error)
	TOIDReadByLId(ctx context.Context, in *RPCLId, opts ...grpc.CallOption) (*RPCReply, error)
}

type maintainerClient struct {
	cc *grpc.ClientConn
}

func NewMaintainerClient(cc *grpc.ClientConn) MaintainerClient {
	return &maintainerClient{cc}
}

func (c *maintainerClient) UpdateMongos(ctx context.Context, in *RPCMongos, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Maintainer/UpdateMongos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintainerClient) UpdateCaches(ctx context.Context, in *RPCCaches, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Maintainer/UpdateCaches", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintainerClient) ReceiveRecords(ctx context.Context, in *RPCRecords, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Maintainer/ReceiveRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintainerClient) UpdateBatchers(ctx context.Context, in *RPCBatchers, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Maintainer/UpdateBatchers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintainerClient) TOIDReceiveRecords(ctx context.Context, in *RPCRecords, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Maintainer/TOIDReceiveRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintainerClient) TOIDUpdateBatchers(ctx context.Context, in *RPCBatchers, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Maintainer/TOIDUpdateBatchers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintainerClient) TOIDReadByLId(ctx context.Context, in *RPCLId, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Maintainer/TOIDReadByLId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Maintainer service

type MaintainerServer interface {
	UpdateMongos(context.Context, *RPCMongos) (*RPCReply, error)
	UpdateCaches(context.Context, *RPCCaches) (*RPCReply, error)
	ReceiveRecords(context.Context, *RPCRecords) (*RPCReply, error)
	UpdateBatchers(context.Context, *RPCBatchers) (*RPCReply, error)
	TOIDReceiveRecords(context.Context, *RPCRecords) (*RPCReply, error)
	TOIDUpdateBatchers(context.Context, *RPCBatchers) (*RPCReply, error)
	TOIDReadByLId(context.Context, *RPCLId) (*RPCReply, error)
}

func RegisterMaintainerServer(s *grpc.Server, srv MaintainerServer) {
	s.RegisterService(&_Maintainer_serviceDesc, srv)
}

func _Maintainer_UpdateMongos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCMongos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintainerServer).UpdateMongos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Maintainer/UpdateMongos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintainerServer).UpdateMongos(ctx, req.(*RPCMongos))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maintainer_UpdateCaches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCCaches)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintainerServer).UpdateCaches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Maintainer/UpdateCaches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintainerServer).UpdateCaches(ctx, req.(*RPCCaches))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maintainer_ReceiveRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintainerServer).ReceiveRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Maintainer/ReceiveRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintainerServer).ReceiveRecords(ctx, req.(*RPCRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maintainer_UpdateBatchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCBatchers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintainerServer).UpdateBatchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Maintainer/UpdateBatchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintainerServer).UpdateBatchers(ctx, req.(*RPCBatchers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maintainer_TOIDReceiveRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintainerServer).TOIDReceiveRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Maintainer/TOIDReceiveRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintainerServer).TOIDReceiveRecords(ctx, req.(*RPCRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maintainer_TOIDUpdateBatchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCBatchers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintainerServer).TOIDUpdateBatchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Maintainer/TOIDUpdateBatchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintainerServer).TOIDUpdateBatchers(ctx, req.(*RPCBatchers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maintainer_TOIDReadByLId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCLId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintainerServer).TOIDReadByLId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Maintainer/TOIDReadByLId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintainerServer).TOIDReadByLId(ctx, req.(*RPCLId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Maintainer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Maintainer",
	HandlerType: (*MaintainerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMongos",
			Handler:    _Maintainer_UpdateMongos_Handler,
		},
		{
			MethodName: "UpdateCaches",
			Handler:    _Maintainer_UpdateCaches_Handler,
		},
		{
			MethodName: "ReceiveRecords",
			Handler:    _Maintainer_ReceiveRecords_Handler,
		},
		{
			MethodName: "UpdateBatchers",
			Handler:    _Maintainer_UpdateBatchers_Handler,
		},
		{
			MethodName: "TOIDReceiveRecords",
			Handler:    _Maintainer_TOIDReceiveRecords_Handler,
		},
		{
			MethodName: "TOIDUpdateBatchers",
			Handler:    _Maintainer_TOIDUpdateBatchers_Handler,
		},
		{
			MethodName: "TOIDReadByLId",
			Handler:    _Maintainer_TOIDReadByLId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maintainer.proto",
}

func init() { proto.RegisterFile("maintainer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0x5d, 0x8b, 0xd4, 0x30,
	0x14, 0xb5, 0x9d, 0xaf, 0xed, 0x9d, 0x0f, 0x96, 0x30, 0x48, 0x18, 0x7c, 0x28, 0x65, 0xc5, 0xe2,
	0x42, 0x85, 0x11, 0x54, 0xf4, 0xc9, 0xad, 0x3e, 0x2c, 0xb8, 0x38, 0x84, 0xf5, 0x07, 0x64, 0xdb,
	0x30, 0x13, 0x9c, 0x69, 0x4b, 0x92, 0x1d, 0xe8, 0xcf, 0xf2, 0x17, 0xf8, 0xd7, 0x24, 0x1f, 0x4d,
	0x67, 0x7c, 0x90, 0xf5, 0xed, 0x9e, 0xe4, 0xf4, 0xdc, 0x7b, 0xee, 0x49, 0xe1, 0xf2, 0x40, 0x79,
	0xa5, 0x28, 0xaf, 0x98, 0xc8, 0x1a, 0x51, 0xab, 0x3a, 0xf9, 0x15, 0x42, 0x44, 0x36, 0x39, 0x61,
	0x45, 0x2d, 0x4a, 0xb4, 0x80, 0x90, 0x97, 0x38, 0x88, 0x83, 0x34, 0x22, 0x21, 0x2f, 0xd1, 0x25,
	0x0c, 0xf6, 0xbc, 0xc4, 0x61, 0x1c, 0xa4, 0x73, 0xa2, 0x4b, 0xf4, 0x1c, 0xc6, 0x0d, 0x15, 0xac,
	0x52, 0x78, 0x60, 0x58, 0x0e, 0xa1, 0x17, 0x10, 0x29, 0x7e, 0x60, 0x52, 0xd1, 0x43, 0x83, 0x87,
	0x71, 0x90, 0x0e, 0x48, 0x7f, 0x80, 0x10, 0x0c, 0x77, 0xb5, 0x54, 0x78, 0x64, 0x84, 0x4c, 0x8d,
	0x52, 0x18, 0x2a, 0xba, 0x95, 0x78, 0x1c, 0x0f, 0xd2, 0xe9, 0x7a, 0x99, 0xf9, 0x29, 0xb2, 0x7b,
	0xba, 0x95, 0x5f, 0x2b, 0x25, 0x5a, 0x62, 0x18, 0x68, 0x09, 0x23, 0x25, 0x68, 0xc1, 0xf0, 0xc4,
	0xb4, 0xb4, 0x40, 0x6b, 0xaa, 0x9a, 0x97, 0xf8, 0xc2, 0x6a, 0xea, 0x1a, 0x5d, 0x43, 0x54, 0xd0,
	0x47, 0x49, 0xf7, 0x5c, 0xb5, 0x38, 0x8a, 0x83, 0x74, 0xba, 0x9e, 0x6b, 0xe1, 0xbc, 0x3b, 0x24,
	0xfd, 0xfd, 0xea, 0x3d, 0x44, 0xbe, 0x93, 0x76, 0xfa, 0x93, 0xb5, 0xce, 0xba, 0x2e, 0x75, 0xd7,
	0x23, 0xdd, 0x3f, 0x32, 0xe3, 0x3e, 0x22, 0x16, 0x7c, 0x0c, 0x3f, 0x04, 0xc9, 0x3b, 0x98, 0x9d,
	0x6a, 0x7a, 0x77, 0xc1, 0x89, 0xbb, 0x6e, 0xba, 0xb0, 0x9f, 0x2e, 0x59, 0x03, 0x78, 0x93, 0x12,
	0x5d, 0xc1, 0x44, 0xd8, 0x12, 0x07, 0x66, 0x05, 0xd0, 0xaf, 0x80, 0x74, 0x57, 0xc9, 0x15, 0x5c,
	0x98, 0xd3, 0x66, 0xdf, 0x22, 0x0c, 0x93, 0x03, 0x93, 0x92, 0x6e, 0x99, 0x9b, 0xb3, 0x83, 0xc9,
	0x67, 0x98, 0x92, 0x4d, 0x7e, 0x43, 0x55, 0xb1, 0x63, 0x42, 0x6a, 0xe2, 0x91, 0x09, 0xc9, 0xeb,
	0xca, 0xcd, 0xd4, 0x41, 0x7d, 0xf3, 0x60, 0x59, 0x38, 0x8c, 0x07, 0x5a, 0xc2, 0xc1, 0x64, 0x05,
	0x63, 0xb2, 0xc9, 0xbf, 0xdd, 0xfa, 0xd0, 0x03, 0x1f, 0x7a, 0xf2, 0xc9, 0xbc, 0x91, 0x9c, 0x16,
	0x3b, 0xf6, 0x2f, 0xf1, 0x25, 0x8c, 0xb4, 0x77, 0xe9, 0xa4, 0x2d, 0x70, 0x1f, 0xdf, 0xd5, 0xd5,
	0xb6, 0xfe, 0xef, 0x8f, 0xd7, 0xbf, 0x43, 0x80, 0x3b, 0xff, 0x66, 0xd1, 0x2b, 0x98, 0xfd, 0x68,
	0x4a, 0xaa, 0x98, 0x93, 0x33, 0x2b, 0xb3, 0xf5, 0x2a, 0xca, 0xba, 0x45, 0x25, 0xcf, 0x7a, 0xa2,
	0x1b, 0x1a, 0x32, 0x6f, 0xe0, 0x9c, 0xf8, 0x1a, 0x16, 0x84, 0x15, 0x8c, 0x1f, 0x59, 0x97, 0xcb,
	0xb4, 0x8f, 0xe1, 0x2f, 0xee, 0x35, 0x2c, 0xac, 0xa8, 0x5f, 0xf4, 0x2c, 0x3b, 0x59, 0xfb, 0x39,
	0x39, 0x03, 0x74, 0xff, 0xfd, 0xf6, 0xcb, 0x93, 0xc5, 0xdf, 0x58, 0xfe, 0xd3, 0x1b, 0xbc, 0x84,
	0xb9, 0x6d, 0x40, 0xcb, 0x9b, 0x56, 0xe7, 0x36, 0xc9, 0x6c, 0x80, 0x67, 0xb4, 0x87, 0xb1, 0xf9,
	0xcf, 0xdf, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x84, 0xde, 0x36, 0xf3, 0xfb, 0x03, 0x00, 0x00,
}
