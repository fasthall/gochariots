// Code generated by protoc-gen-go. DO NOT EDIT.
// source: maintainer/indexer/indexer.proto

/*
Package indexer is a generated protocol buffer package.

It is generated from these files:
	maintainer/indexer/indexer.proto

It has these top-level messages:
	RPCRecord
	RPCCausality
	RPCReply
	RPCQueries
	RPCQuery
	RPCQueryReply
	RPCTags
	RPCLIds
	RPCTOIdTags
	RPCTOIdQuery
	RPCTOIDQueryReply
*/
package indexer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RPCRecord struct {
	Id        uint64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Timestamp int64             `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Host      uint32            `protobuf:"varint,3,opt,name=host" json:"host,omitempty"`
	Lid       uint32            `protobuf:"varint,4,opt,name=lid" json:"lid,omitempty"`
	Tags      map[string]string `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Hash      []uint64          `protobuf:"varint,6,rep,packed,name=hash" json:"hash,omitempty"`
	Seed      uint64            `protobuf:"varint,7,opt,name=seed" json:"seed,omitempty"`
	// for TOID record
	Toid      uint32        `protobuf:"varint,8,opt,name=toid" json:"toid,omitempty"`
	Causality *RPCCausality `protobuf:"bytes,9,opt,name=causality" json:"causality,omitempty"`
}

func (m *RPCRecord) Reset()                    { *m = RPCRecord{} }
func (m *RPCRecord) String() string            { return proto.CompactTextString(m) }
func (*RPCRecord) ProtoMessage()               {}
func (*RPCRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RPCRecord) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RPCRecord) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RPCRecord) GetHost() uint32 {
	if m != nil {
		return m.Host
	}
	return 0
}

func (m *RPCRecord) GetLid() uint32 {
	if m != nil {
		return m.Lid
	}
	return 0
}

func (m *RPCRecord) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RPCRecord) GetHash() []uint64 {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *RPCRecord) GetSeed() uint64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *RPCRecord) GetToid() uint32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *RPCRecord) GetCausality() *RPCCausality {
	if m != nil {
		return m.Causality
	}
	return nil
}

type RPCCausality struct {
	Host uint32 `protobuf:"varint,1,opt,name=host" json:"host,omitempty"`
	Toid uint32 `protobuf:"varint,2,opt,name=toid" json:"toid,omitempty"`
}

func (m *RPCCausality) Reset()                    { *m = RPCCausality{} }
func (m *RPCCausality) String() string            { return proto.CompactTextString(m) }
func (*RPCCausality) ProtoMessage()               {}
func (*RPCCausality) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RPCCausality) GetHost() uint32 {
	if m != nil {
		return m.Host
	}
	return 0
}

func (m *RPCCausality) GetToid() uint32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

type RPCReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *RPCReply) Reset()                    { *m = RPCReply{} }
func (m *RPCReply) String() string            { return proto.CompactTextString(m) }
func (*RPCReply) ProtoMessage()               {}
func (*RPCReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RPCReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RPCQueries struct {
	Queries []*RPCQuery `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
}

func (m *RPCQueries) Reset()                    { *m = RPCQueries{} }
func (m *RPCQueries) String() string            { return proto.CompactTextString(m) }
func (*RPCQueries) ProtoMessage()               {}
func (*RPCQueries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RPCQueries) GetQueries() []*RPCQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

type RPCQuery struct {
	Hash []uint64 `protobuf:"varint,1,rep,packed,name=hash" json:"hash,omitempty"`
	Seed uint64   `protobuf:"varint,2,opt,name=seed" json:"seed,omitempty"`
}

func (m *RPCQuery) Reset()                    { *m = RPCQuery{} }
func (m *RPCQuery) String() string            { return proto.CompactTextString(m) }
func (*RPCQuery) ProtoMessage()               {}
func (*RPCQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RPCQuery) GetHash() []uint64 {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *RPCQuery) GetSeed() uint64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

type RPCQueryReply struct {
	Reply []bool `protobuf:"varint,1,rep,packed,name=reply" json:"reply,omitempty"`
}

func (m *RPCQueryReply) Reset()                    { *m = RPCQueryReply{} }
func (m *RPCQueryReply) String() string            { return proto.CompactTextString(m) }
func (*RPCQueryReply) ProtoMessage()               {}
func (*RPCQueryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RPCQueryReply) GetReply() []bool {
	if m != nil {
		return m.Reply
	}
	return nil
}

type RPCTags struct {
	Lid  uint32            `protobuf:"varint,1,opt,name=lid" json:"lid,omitempty"`
	Seed uint64            `protobuf:"varint,2,opt,name=seed" json:"seed,omitempty"`
	Tags map[string]string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RPCTags) Reset()                    { *m = RPCTags{} }
func (m *RPCTags) String() string            { return proto.CompactTextString(m) }
func (*RPCTags) ProtoMessage()               {}
func (*RPCTags) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RPCTags) GetLid() uint32 {
	if m != nil {
		return m.Lid
	}
	return 0
}

func (m *RPCTags) GetSeed() uint64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *RPCTags) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type RPCLIds struct {
	Lid []uint32 `protobuf:"varint,1,rep,packed,name=lid" json:"lid,omitempty"`
}

func (m *RPCLIds) Reset()                    { *m = RPCLIds{} }
func (m *RPCLIds) String() string            { return proto.CompactTextString(m) }
func (*RPCLIds) ProtoMessage()               {}
func (*RPCLIds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RPCLIds) GetLid() []uint32 {
	if m != nil {
		return m.Lid
	}
	return nil
}

type RPCTOIdTags struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Lid  uint32 `protobuf:"varint,2,opt,name=lid" json:"lid,omitempty"`
	Toid uint32 `protobuf:"varint,3,opt,name=toid" json:"toid,omitempty"`
	Host uint32 `protobuf:"varint,4,opt,name=host" json:"host,omitempty"`
}

func (m *RPCTOIdTags) Reset()                    { *m = RPCTOIdTags{} }
func (m *RPCTOIdTags) String() string            { return proto.CompactTextString(m) }
func (*RPCTOIdTags) ProtoMessage()               {}
func (*RPCTOIdTags) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RPCTOIdTags) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RPCTOIdTags) GetLid() uint32 {
	if m != nil {
		return m.Lid
	}
	return 0
}

func (m *RPCTOIdTags) GetToid() uint32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *RPCTOIdTags) GetHost() uint32 {
	if m != nil {
		return m.Host
	}
	return 0
}

type RPCTOIdQuery struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RPCTOIdQuery) Reset()                    { *m = RPCTOIdQuery{} }
func (m *RPCTOIdQuery) String() string            { return proto.CompactTextString(m) }
func (*RPCTOIdQuery) ProtoMessage()               {}
func (*RPCTOIdQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RPCTOIdQuery) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RPCTOIDQueryReply struct {
	Existed bool   `protobuf:"varint,1,opt,name=existed" json:"existed,omitempty"`
	Lid     uint32 `protobuf:"varint,2,opt,name=lid" json:"lid,omitempty"`
	Toid    uint32 `protobuf:"varint,3,opt,name=toid" json:"toid,omitempty"`
	Host    uint32 `protobuf:"varint,4,opt,name=host" json:"host,omitempty"`
}

func (m *RPCTOIDQueryReply) Reset()                    { *m = RPCTOIDQueryReply{} }
func (m *RPCTOIDQueryReply) String() string            { return proto.CompactTextString(m) }
func (*RPCTOIDQueryReply) ProtoMessage()               {}
func (*RPCTOIDQueryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RPCTOIDQueryReply) GetExisted() bool {
	if m != nil {
		return m.Existed
	}
	return false
}

func (m *RPCTOIDQueryReply) GetLid() uint32 {
	if m != nil {
		return m.Lid
	}
	return 0
}

func (m *RPCTOIDQueryReply) GetToid() uint32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *RPCTOIDQueryReply) GetHost() uint32 {
	if m != nil {
		return m.Host
	}
	return 0
}

func init() {
	proto.RegisterType((*RPCRecord)(nil), "RPCRecord")
	proto.RegisterType((*RPCCausality)(nil), "RPCCausality")
	proto.RegisterType((*RPCReply)(nil), "RPCReply")
	proto.RegisterType((*RPCQueries)(nil), "RPCQueries")
	proto.RegisterType((*RPCQuery)(nil), "RPCQuery")
	proto.RegisterType((*RPCQueryReply)(nil), "RPCQueryReply")
	proto.RegisterType((*RPCTags)(nil), "RPCTags")
	proto.RegisterType((*RPCLIds)(nil), "RPCLIds")
	proto.RegisterType((*RPCTOIdTags)(nil), "RPCTOIdTags")
	proto.RegisterType((*RPCTOIdQuery)(nil), "RPCTOIdQuery")
	proto.RegisterType((*RPCTOIDQueryReply)(nil), "RPCTOIDQueryReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Indexer service

type IndexerClient interface {
	Query(ctx context.Context, in *RPCQueries, opts ...grpc.CallOption) (*RPCQueryReply, error)
	InsertTags(ctx context.Context, in *RPCTags, opts ...grpc.CallOption) (*RPCReply, error)
	GetLIds(ctx context.Context, in *RPCTags, opts ...grpc.CallOption) (*RPCLIds, error)
	TOIDQuery(ctx context.Context, in *RPCTOIdQuery, opts ...grpc.CallOption) (*RPCTOIDQueryReply, error)
	TOIDInsertTags(ctx context.Context, in *RPCTOIdTags, opts ...grpc.CallOption) (*RPCReply, error)
}

type indexerClient struct {
	cc *grpc.ClientConn
}

func NewIndexerClient(cc *grpc.ClientConn) IndexerClient {
	return &indexerClient{cc}
}

func (c *indexerClient) Query(ctx context.Context, in *RPCQueries, opts ...grpc.CallOption) (*RPCQueryReply, error) {
	out := new(RPCQueryReply)
	err := grpc.Invoke(ctx, "/Indexer/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) InsertTags(ctx context.Context, in *RPCTags, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Indexer/InsertTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetLIds(ctx context.Context, in *RPCTags, opts ...grpc.CallOption) (*RPCLIds, error) {
	out := new(RPCLIds)
	err := grpc.Invoke(ctx, "/Indexer/GetLIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) TOIDQuery(ctx context.Context, in *RPCTOIdQuery, opts ...grpc.CallOption) (*RPCTOIDQueryReply, error) {
	out := new(RPCTOIDQueryReply)
	err := grpc.Invoke(ctx, "/Indexer/TOIDQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) TOIDInsertTags(ctx context.Context, in *RPCTOIdTags, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Indexer/TOIDInsertTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Indexer service

type IndexerServer interface {
	Query(context.Context, *RPCQueries) (*RPCQueryReply, error)
	InsertTags(context.Context, *RPCTags) (*RPCReply, error)
	GetLIds(context.Context, *RPCTags) (*RPCLIds, error)
	TOIDQuery(context.Context, *RPCTOIdQuery) (*RPCTOIDQueryReply, error)
	TOIDInsertTags(context.Context, *RPCTOIdTags) (*RPCReply, error)
}

func RegisterIndexerServer(s *grpc.Server, srv IndexerServer) {
	s.RegisterService(&_Indexer_serviceDesc, srv)
}

func _Indexer_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCQueries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).Query(ctx, req.(*RPCQueries))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_InsertTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).InsertTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/InsertTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).InsertTags(ctx, req.(*RPCTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetLIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetLIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/GetLIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetLIds(ctx, req.(*RPCTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_TOIDQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCTOIdQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).TOIDQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/TOIDQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).TOIDQuery(ctx, req.(*RPCTOIdQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_TOIDInsertTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCTOIdTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).TOIDInsertTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Indexer/TOIDInsertTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).TOIDInsertTags(ctx, req.(*RPCTOIdTags))
	}
	return interceptor(ctx, in, info, handler)
}

var _Indexer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Indexer",
	HandlerType: (*IndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Indexer_Query_Handler,
		},
		{
			MethodName: "InsertTags",
			Handler:    _Indexer_InsertTags_Handler,
		},
		{
			MethodName: "GetLIds",
			Handler:    _Indexer_GetLIds_Handler,
		},
		{
			MethodName: "TOIDQuery",
			Handler:    _Indexer_TOIDQuery_Handler,
		},
		{
			MethodName: "TOIDInsertTags",
			Handler:    _Indexer_TOIDInsertTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maintainer/indexer/indexer.proto",
}

func init() { proto.RegisterFile("maintainer/indexer/indexer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0x5f, 0x8b, 0x13, 0x3f,
	0x14, 0x6d, 0x66, 0xa6, 0x3b, 0x9d, 0xdb, 0x6d, 0xf9, 0xfd, 0x42, 0x1f, 0x42, 0x15, 0x1d, 0xb2,
	0xba, 0x0c, 0x2c, 0x8c, 0x5a, 0x41, 0xc5, 0xd7, 0x2a, 0x52, 0x10, 0xac, 0x41, 0xf0, 0x39, 0xee,
	0x84, 0x6e, 0xb0, 0xff, 0x9c, 0xa4, 0xb2, 0xf3, 0x2d, 0xfc, 0x1e, 0x7e, 0x1f, 0x3f, 0x8f, 0xe4,
	0xce, 0xdf, 0xd6, 0x7d, 0xda, 0xa7, 0x9e, 0xdc, 0x24, 0xf7, 0x9c, 0x7b, 0x4e, 0xa6, 0x10, 0x6f,
	0xa4, 0xde, 0x5a, 0xa9, 0xb7, 0x2a, 0x7f, 0xa6, 0xb7, 0x99, 0xba, 0x6d, 0x7f, 0xd3, 0x7d, 0xbe,
	0xb3, 0x3b, 0xfe, 0xdb, 0x83, 0x48, 0x2c, 0xe7, 0x42, 0x5d, 0xef, 0xf2, 0x8c, 0x8e, 0xc1, 0xd3,
	0x19, 0x23, 0x31, 0x49, 0x02, 0xe1, 0xe9, 0x8c, 0x3e, 0x84, 0xc8, 0xea, 0x8d, 0x32, 0x56, 0x6e,
	0xf6, 0xcc, 0x8b, 0x49, 0xe2, 0x8b, 0xb6, 0x40, 0x29, 0x04, 0x37, 0x3b, 0x63, 0x99, 0x1f, 0x93,
	0x64, 0x24, 0x10, 0xd3, 0xff, 0xc0, 0x5f, 0xeb, 0x8c, 0x05, 0x58, 0x72, 0x90, 0x26, 0x10, 0x58,
	0xb9, 0x32, 0xac, 0x1f, 0xfb, 0xc9, 0x70, 0x36, 0x49, 0x1b, 0xb6, 0xf4, 0x8b, 0x5c, 0x99, 0xf7,
	0x5b, 0x9b, 0x17, 0x02, 0x4f, 0x60, 0x3f, 0x69, 0x6e, 0xd8, 0x59, 0xec, 0x27, 0x81, 0x40, 0xec,
	0x6a, 0x46, 0xa9, 0x8c, 0x85, 0xa8, 0x09, 0xb1, 0xab, 0xd9, 0x9d, 0xce, 0xd8, 0xa0, 0xe4, 0x75,
	0x98, 0x5e, 0x41, 0x74, 0x2d, 0x0f, 0x46, 0xae, 0xb5, 0x2d, 0x58, 0x14, 0x93, 0x64, 0x38, 0x1b,
	0x39, 0xaa, 0x79, 0x5d, 0x14, 0xed, 0xfe, 0xf4, 0x35, 0x44, 0x0d, 0xb7, 0x53, 0xfc, 0x5d, 0x15,
	0x38, 0x74, 0x24, 0x1c, 0xa4, 0x13, 0xe8, 0xff, 0x94, 0xeb, 0x83, 0xc2, 0x89, 0x23, 0x51, 0x2e,
	0xde, 0x7a, 0x6f, 0x08, 0x7f, 0x05, 0xe7, 0xdd, 0x9e, 0x8d, 0x03, 0xa4, 0xe3, 0x40, 0xad, 0xce,
	0x6b, 0xd5, 0xf1, 0x27, 0x30, 0xc0, 0xb1, 0xf7, 0xeb, 0x82, 0x32, 0x08, 0x37, 0xca, 0x18, 0xb9,
	0x52, 0x15, 0x67, 0xbd, 0xe4, 0x2f, 0x00, 0xc4, 0x72, 0xfe, 0xf9, 0xa0, 0x72, 0xad, 0x0c, 0xbd,
	0x80, 0xf0, 0x47, 0x09, 0x19, 0x41, 0xeb, 0xa2, 0xb4, 0xda, 0x2d, 0x44, 0xbd, 0xc3, 0x67, 0xd8,
	0x18, 0x8b, 0x8d, 0x7d, 0xe4, 0x0e, 0xfb, 0xbc, 0xd6, 0x3e, 0xfe, 0x14, 0x46, 0x4d, 0x23, 0x54,
	0x34, 0x81, 0x7e, 0xee, 0x00, 0xde, 0x1c, 0x88, 0x72, 0xc1, 0x7f, 0x11, 0x08, 0xc5, 0x72, 0xee,
	0x8c, 0xaa, 0x53, 0x25, 0x6d, 0xaa, 0x77, 0x34, 0xa6, 0x97, 0x55, 0xd2, 0x3e, 0xca, 0xa5, 0x69,
	0x75, 0xfb, 0x34, 0xe7, 0xfb, 0xdb, 0xff, 0x00, 0x15, 0x7d, 0x5c, 0x64, 0x1d, 0x45, 0x7e, 0xa5,
	0x88, 0x7f, 0x85, 0xa1, 0x23, 0xfc, 0xb4, 0xc8, 0x50, 0xf2, 0xe9, 0x53, 0xae, 0x2e, 0x78, 0x47,
	0x23, 0x60, 0x50, 0x7e, 0xe7, 0x19, 0xd5, 0x81, 0x06, 0x6d, 0xa0, 0xfc, 0x11, 0x86, 0xee, 0x1a,
	0x97, 0x3e, 0x9f, 0x74, 0xe6, 0x2b, 0xf8, 0xbf, 0xdc, 0x7f, 0xd7, 0xf1, 0x94, 0x41, 0xa8, 0x6e,
	0xb5, 0xb1, 0xaa, 0x3c, 0x39, 0x10, 0xf5, 0xf2, 0xfe, 0x42, 0x66, 0x7f, 0x08, 0x84, 0x8b, 0xf2,
	0xeb, 0xa5, 0x97, 0xd0, 0x2f, 0xd5, 0x0c, 0xd3, 0xf6, 0xcd, 0x4c, 0xc7, 0xe9, 0x51, 0xb2, 0xbc,
	0x47, 0x2f, 0x00, 0x16, 0x5b, 0xa3, 0x72, 0x8b, 0xa6, 0x0c, 0xea, 0x4c, 0xa6, 0x51, 0x5a, 0x3f,
	0x48, 0xde, 0xa3, 0x8f, 0x21, 0xfc, 0xa0, 0x2c, 0xfa, 0xda, 0x9e, 0x40, 0xe4, 0x6a, 0xbc, 0x47,
	0x9f, 0x43, 0xd4, 0xcc, 0x47, 0xf1, 0xbb, 0x6a, 0xec, 0x98, 0xd2, 0xf4, 0x9f, 0xe9, 0x79, 0x8f,
	0x5e, 0xc1, 0xd8, 0xd5, 0x3a, 0xdc, 0xe7, 0x69, 0x27, 0x9e, 0x23, 0xfe, 0x6f, 0x67, 0xf8, 0x5f,
	0xf4, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xca, 0xe6, 0xad, 0x01, 0xaf, 0x04, 0x00, 0x00,
}
