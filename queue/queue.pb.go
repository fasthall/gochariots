// Code generated by protoc-gen-go. DO NOT EDIT.
// source: queue.proto

/*
Package queue is a generated protocol buffer package.

It is generated from these files:
	queue.proto

It has these top-level messages:
	RPCRecord
	RPCCausality
	RPCRecords
	RPCReply
	RPCQueue
	RPCToken
	RPCMaintainers
	RPCIndexers
	RPCTOIDToken
	RPCCaches
	RPCMongos
*/
package queue

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RPCRecord struct {
	Id        string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Lid       uint32            `protobuf:"varint,2,opt,name=lid" json:"lid,omitempty"`
	Parent    string            `protobuf:"bytes,3,opt,name=parent" json:"parent,omitempty"`
	Timestamp int64             `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Host      uint32            `protobuf:"varint,5,opt,name=host" json:"host,omitempty"`
	Tags      map[string]string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Trace     string            `protobuf:"bytes,7,opt,name=trace" json:"trace,omitempty"`
	// for TOID record
	Toid      uint32        `protobuf:"varint,8,opt,name=toid" json:"toid,omitempty"`
	Causality *RPCCausality `protobuf:"bytes,9,opt,name=causality" json:"causality,omitempty"`
}

func (m *RPCRecord) Reset()                    { *m = RPCRecord{} }
func (m *RPCRecord) String() string            { return proto.CompactTextString(m) }
func (*RPCRecord) ProtoMessage()               {}
func (*RPCRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RPCRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RPCRecord) GetLid() uint32 {
	if m != nil {
		return m.Lid
	}
	return 0
}

func (m *RPCRecord) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *RPCRecord) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RPCRecord) GetHost() uint32 {
	if m != nil {
		return m.Host
	}
	return 0
}

func (m *RPCRecord) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RPCRecord) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

func (m *RPCRecord) GetToid() uint32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *RPCRecord) GetCausality() *RPCCausality {
	if m != nil {
		return m.Causality
	}
	return nil
}

type RPCCausality struct {
	Host uint32 `protobuf:"varint,1,opt,name=host" json:"host,omitempty"`
	Toid uint32 `protobuf:"varint,2,opt,name=toid" json:"toid,omitempty"`
}

func (m *RPCCausality) Reset()                    { *m = RPCCausality{} }
func (m *RPCCausality) String() string            { return proto.CompactTextString(m) }
func (*RPCCausality) ProtoMessage()               {}
func (*RPCCausality) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RPCCausality) GetHost() uint32 {
	if m != nil {
		return m.Host
	}
	return 0
}

func (m *RPCCausality) GetToid() uint32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

type RPCRecords struct {
	Records []*RPCRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *RPCRecords) Reset()                    { *m = RPCRecords{} }
func (m *RPCRecords) String() string            { return proto.CompactTextString(m) }
func (*RPCRecords) ProtoMessage()               {}
func (*RPCRecords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RPCRecords) GetRecords() []*RPCRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type RPCReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *RPCReply) Reset()                    { *m = RPCReply{} }
func (m *RPCReply) String() string            { return proto.CompactTextString(m) }
func (*RPCReply) ProtoMessage()               {}
func (*RPCReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RPCReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RPCQueue struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Queue   string `protobuf:"bytes,2,opt,name=queue" json:"queue,omitempty"`
}

func (m *RPCQueue) Reset()                    { *m = RPCQueue{} }
func (m *RPCQueue) String() string            { return proto.CompactTextString(m) }
func (*RPCQueue) ProtoMessage()               {}
func (*RPCQueue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RPCQueue) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RPCQueue) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

type RPCToken struct {
	Lastlid uint32 `protobuf:"varint,1,opt,name=lastlid" json:"lastlid,omitempty"`
}

func (m *RPCToken) Reset()                    { *m = RPCToken{} }
func (m *RPCToken) String() string            { return proto.CompactTextString(m) }
func (*RPCToken) ProtoMessage()               {}
func (*RPCToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RPCToken) GetLastlid() uint32 {
	if m != nil {
		return m.Lastlid
	}
	return 0
}

type RPCMaintainers struct {
	Version    uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Maintainer []string `protobuf:"bytes,2,rep,name=maintainer" json:"maintainer,omitempty"`
}

func (m *RPCMaintainers) Reset()                    { *m = RPCMaintainers{} }
func (m *RPCMaintainers) String() string            { return proto.CompactTextString(m) }
func (*RPCMaintainers) ProtoMessage()               {}
func (*RPCMaintainers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RPCMaintainers) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RPCMaintainers) GetMaintainer() []string {
	if m != nil {
		return m.Maintainer
	}
	return nil
}

type RPCIndexers struct {
	Version uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Indexer []string `protobuf:"bytes,2,rep,name=indexer" json:"indexer,omitempty"`
}

func (m *RPCIndexers) Reset()                    { *m = RPCIndexers{} }
func (m *RPCIndexers) String() string            { return proto.CompactTextString(m) }
func (*RPCIndexers) ProtoMessage()               {}
func (*RPCIndexers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RPCIndexers) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RPCIndexers) GetIndexer() []string {
	if m != nil {
		return m.Indexer
	}
	return nil
}

type RPCTOIDToken struct {
	MaxTOId         []uint32     `protobuf:"varint,1,rep,packed,name=maxTOId" json:"maxTOId,omitempty"`
	LastLId         uint32       `protobuf:"varint,2,opt,name=lastLId" json:"lastLId,omitempty"`
	DeferredRecords []*RPCRecord `protobuf:"bytes,3,rep,name=deferredRecords" json:"deferredRecords,omitempty"`
}

func (m *RPCTOIDToken) Reset()                    { *m = RPCTOIDToken{} }
func (m *RPCTOIDToken) String() string            { return proto.CompactTextString(m) }
func (*RPCTOIDToken) ProtoMessage()               {}
func (*RPCTOIDToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RPCTOIDToken) GetMaxTOId() []uint32 {
	if m != nil {
		return m.MaxTOId
	}
	return nil
}

func (m *RPCTOIDToken) GetLastLId() uint32 {
	if m != nil {
		return m.LastLId
	}
	return 0
}

func (m *RPCTOIDToken) GetDeferredRecords() []*RPCRecord {
	if m != nil {
		return m.DeferredRecords
	}
	return nil
}

type RPCCaches struct {
	Version uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Hosts   []string `protobuf:"bytes,2,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *RPCCaches) Reset()                    { *m = RPCCaches{} }
func (m *RPCCaches) String() string            { return proto.CompactTextString(m) }
func (*RPCCaches) ProtoMessage()               {}
func (*RPCCaches) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RPCCaches) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RPCCaches) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type RPCMongos struct {
	Version uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Hosts   []string `protobuf:"bytes,2,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *RPCMongos) Reset()                    { *m = RPCMongos{} }
func (m *RPCMongos) String() string            { return proto.CompactTextString(m) }
func (*RPCMongos) ProtoMessage()               {}
func (*RPCMongos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RPCMongos) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RPCMongos) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func init() {
	proto.RegisterType((*RPCRecord)(nil), "RPCRecord")
	proto.RegisterType((*RPCCausality)(nil), "RPCCausality")
	proto.RegisterType((*RPCRecords)(nil), "RPCRecords")
	proto.RegisterType((*RPCReply)(nil), "RPCReply")
	proto.RegisterType((*RPCQueue)(nil), "RPCQueue")
	proto.RegisterType((*RPCToken)(nil), "RPCToken")
	proto.RegisterType((*RPCMaintainers)(nil), "RPCMaintainers")
	proto.RegisterType((*RPCIndexers)(nil), "RPCIndexers")
	proto.RegisterType((*RPCTOIDToken)(nil), "RPCTOIDToken")
	proto.RegisterType((*RPCCaches)(nil), "RPCCaches")
	proto.RegisterType((*RPCMongos)(nil), "RPCMongos")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Queue service

type QueueClient interface {
	UpdateMongos(ctx context.Context, in *RPCMongos, opts ...grpc.CallOption) (*RPCReply, error)
	UpdateCaches(ctx context.Context, in *RPCCaches, opts ...grpc.CallOption) (*RPCReply, error)
	ReceiveRecords(ctx context.Context, in *RPCRecords, opts ...grpc.CallOption) (*RPCReply, error)
	ReceiveToken(ctx context.Context, in *RPCToken, opts ...grpc.CallOption) (*RPCReply, error)
	UpdateNextQueue(ctx context.Context, in *RPCQueue, opts ...grpc.CallOption) (*RPCReply, error)
	UpdateMaintainers(ctx context.Context, in *RPCMaintainers, opts ...grpc.CallOption) (*RPCReply, error)
	TOIDReceiveRecords(ctx context.Context, in *RPCRecords, opts ...grpc.CallOption) (*RPCReply, error)
	TOIDReceiveToken(ctx context.Context, in *RPCTOIDToken, opts ...grpc.CallOption) (*RPCReply, error)
	TOIDUpdateNextQueue(ctx context.Context, in *RPCQueue, opts ...grpc.CallOption) (*RPCReply, error)
	TOIDUpdateMaintainers(ctx context.Context, in *RPCMaintainers, opts ...grpc.CallOption) (*RPCReply, error)
}

type queueClient struct {
	cc *grpc.ClientConn
}

func NewQueueClient(cc *grpc.ClientConn) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) UpdateMongos(ctx context.Context, in *RPCMongos, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Queue/UpdateMongos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) UpdateCaches(ctx context.Context, in *RPCCaches, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Queue/UpdateCaches", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) ReceiveRecords(ctx context.Context, in *RPCRecords, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Queue/ReceiveRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) ReceiveToken(ctx context.Context, in *RPCToken, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Queue/ReceiveToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) UpdateNextQueue(ctx context.Context, in *RPCQueue, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Queue/UpdateNextQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) UpdateMaintainers(ctx context.Context, in *RPCMaintainers, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Queue/UpdateMaintainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) TOIDReceiveRecords(ctx context.Context, in *RPCRecords, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Queue/TOIDReceiveRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) TOIDReceiveToken(ctx context.Context, in *RPCTOIDToken, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Queue/TOIDReceiveToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) TOIDUpdateNextQueue(ctx context.Context, in *RPCQueue, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Queue/TOIDUpdateNextQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) TOIDUpdateMaintainers(ctx context.Context, in *RPCMaintainers, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/Queue/TOIDUpdateMaintainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Queue service

type QueueServer interface {
	UpdateMongos(context.Context, *RPCMongos) (*RPCReply, error)
	UpdateCaches(context.Context, *RPCCaches) (*RPCReply, error)
	ReceiveRecords(context.Context, *RPCRecords) (*RPCReply, error)
	ReceiveToken(context.Context, *RPCToken) (*RPCReply, error)
	UpdateNextQueue(context.Context, *RPCQueue) (*RPCReply, error)
	UpdateMaintainers(context.Context, *RPCMaintainers) (*RPCReply, error)
	TOIDReceiveRecords(context.Context, *RPCRecords) (*RPCReply, error)
	TOIDReceiveToken(context.Context, *RPCTOIDToken) (*RPCReply, error)
	TOIDUpdateNextQueue(context.Context, *RPCQueue) (*RPCReply, error)
	TOIDUpdateMaintainers(context.Context, *RPCMaintainers) (*RPCReply, error)
}

func RegisterQueueServer(s *grpc.Server, srv QueueServer) {
	s.RegisterService(&_Queue_serviceDesc, srv)
}

func _Queue_UpdateMongos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCMongos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).UpdateMongos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Queue/UpdateMongos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).UpdateMongos(ctx, req.(*RPCMongos))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_UpdateCaches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCCaches)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).UpdateCaches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Queue/UpdateCaches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).UpdateCaches(ctx, req.(*RPCCaches))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_ReceiveRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).ReceiveRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Queue/ReceiveRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).ReceiveRecords(ctx, req.(*RPCRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_ReceiveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).ReceiveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Queue/ReceiveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).ReceiveToken(ctx, req.(*RPCToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_UpdateNextQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).UpdateNextQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Queue/UpdateNextQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).UpdateNextQueue(ctx, req.(*RPCQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_UpdateMaintainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCMaintainers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).UpdateMaintainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Queue/UpdateMaintainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).UpdateMaintainers(ctx, req.(*RPCMaintainers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_TOIDReceiveRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).TOIDReceiveRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Queue/TOIDReceiveRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).TOIDReceiveRecords(ctx, req.(*RPCRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_TOIDReceiveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCTOIDToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).TOIDReceiveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Queue/TOIDReceiveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).TOIDReceiveToken(ctx, req.(*RPCTOIDToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_TOIDUpdateNextQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).TOIDUpdateNextQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Queue/TOIDUpdateNextQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).TOIDUpdateNextQueue(ctx, req.(*RPCQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_TOIDUpdateMaintainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCMaintainers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).TOIDUpdateMaintainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Queue/TOIDUpdateMaintainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).TOIDUpdateMaintainers(ctx, req.(*RPCMaintainers))
	}
	return interceptor(ctx, in, info, handler)
}

var _Queue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Queue",
	HandlerType: (*QueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMongos",
			Handler:    _Queue_UpdateMongos_Handler,
		},
		{
			MethodName: "UpdateCaches",
			Handler:    _Queue_UpdateCaches_Handler,
		},
		{
			MethodName: "ReceiveRecords",
			Handler:    _Queue_ReceiveRecords_Handler,
		},
		{
			MethodName: "ReceiveToken",
			Handler:    _Queue_ReceiveToken_Handler,
		},
		{
			MethodName: "UpdateNextQueue",
			Handler:    _Queue_UpdateNextQueue_Handler,
		},
		{
			MethodName: "UpdateMaintainers",
			Handler:    _Queue_UpdateMaintainers_Handler,
		},
		{
			MethodName: "TOIDReceiveRecords",
			Handler:    _Queue_TOIDReceiveRecords_Handler,
		},
		{
			MethodName: "TOIDReceiveToken",
			Handler:    _Queue_TOIDReceiveToken_Handler,
		},
		{
			MethodName: "TOIDUpdateNextQueue",
			Handler:    _Queue_TOIDUpdateNextQueue_Handler,
		},
		{
			MethodName: "TOIDUpdateMaintainers",
			Handler:    _Queue_TOIDUpdateMaintainers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue.proto",
}

func init() { proto.RegisterFile("queue.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xfd, 0x6c, 0xb7, 0x4d, 0x3d, 0xf9, 0xeb, 0xb7, 0x14, 0xb4, 0xaa, 0x10, 0xb2, 0xac, 0x0a,
	0x0c, 0x08, 0x4b, 0x84, 0x5f, 0x95, 0x2b, 0x14, 0xb8, 0x08, 0xa2, 0x34, 0xac, 0xc2, 0x03, 0x2c,
	0xf1, 0x92, 0x5a, 0x75, 0xec, 0xe0, 0xdd, 0x44, 0xc9, 0x63, 0xf1, 0x28, 0xbc, 0x11, 0xda, 0x3f,
	0x3b, 0x2e, 0x52, 0x14, 0xee, 0xe6, 0xec, 0x9e, 0x9d, 0x39, 0x67, 0x66, 0x6c, 0x68, 0xff, 0x5c,
	0xb2, 0x25, 0x8b, 0x17, 0x65, 0x21, 0x8a, 0xf0, 0x97, 0x0b, 0x3e, 0x19, 0x0f, 0x09, 0x9b, 0x16,
	0x65, 0x82, 0x7a, 0xe0, 0xa6, 0x09, 0x76, 0x02, 0x27, 0xf2, 0x89, 0x9b, 0x26, 0xe8, 0x04, 0xbc,
	0x2c, 0x4d, 0xb0, 0x1b, 0x38, 0x51, 0x97, 0xc8, 0x10, 0xdd, 0x83, 0xa3, 0x05, 0x2d, 0x59, 0x2e,
	0xb0, 0xa7, 0x58, 0x06, 0xa1, 0xfb, 0xe0, 0x8b, 0x74, 0xce, 0xb8, 0xa0, 0xf3, 0x05, 0x3e, 0x08,
	0x9c, 0xc8, 0x23, 0xf5, 0x01, 0x42, 0x70, 0x70, 0x5d, 0x70, 0x81, 0x0f, 0x55, 0x22, 0x15, 0xa3,
	0x08, 0x0e, 0x04, 0x9d, 0x71, 0x7c, 0x14, 0x78, 0x51, 0x7b, 0x70, 0x1a, 0x57, 0x2a, 0xe2, 0x09,
	0x9d, 0xf1, 0x8f, 0xb9, 0x28, 0x37, 0x44, 0x31, 0xd0, 0x29, 0x1c, 0x8a, 0x92, 0x4e, 0x19, 0x6e,
	0xa9, 0x92, 0x1a, 0xc8, 0x9c, 0xa2, 0x48, 0x13, 0x7c, 0xac, 0x73, 0xca, 0x18, 0x3d, 0x05, 0x7f,
	0x4a, 0x97, 0x9c, 0x66, 0xa9, 0xd8, 0x60, 0x3f, 0x70, 0xa2, 0xf6, 0xa0, 0x2b, 0x13, 0x0f, 0xed,
	0x21, 0xa9, 0xef, 0xcf, 0xde, 0x80, 0x5f, 0x55, 0x92, 0x4e, 0x6f, 0xd8, 0xc6, 0x58, 0x97, 0xa1,
	0xac, 0xba, 0xa2, 0xd9, 0x92, 0x29, 0xf7, 0x3e, 0xd1, 0xe0, 0xc2, 0x7d, 0xeb, 0x84, 0xaf, 0xa1,
	0xb3, 0x9d, 0xb3, 0x72, 0xe7, 0x6c, 0xb9, 0xb3, 0xea, 0xdc, 0x5a, 0x5d, 0x38, 0x00, 0xa8, 0x4c,
	0x72, 0x74, 0x0e, 0xad, 0x52, 0x87, 0xd8, 0x51, 0x2d, 0x80, 0xba, 0x05, 0xc4, 0x5e, 0x85, 0xe7,
	0x70, 0xac, 0x4e, 0x17, 0xd9, 0x06, 0x61, 0x68, 0xcd, 0x19, 0xe7, 0x74, 0xc6, 0x8c, 0x4e, 0x0b,
	0xc3, 0x0b, 0xc5, 0xfa, 0x2a, 0xe7, 0x2a, 0x59, 0x2b, 0x56, 0xf2, 0xb4, 0xc8, 0x8d, 0x20, 0x0b,
	0xa5, 0x23, 0x35, 0x7a, 0xeb, 0x48, 0x01, 0x53, 0x61, 0x52, 0xdc, 0xb0, 0x5c, 0xbe, 0xcd, 0x28,
	0x17, 0x99, 0x59, 0x82, 0x2e, 0xb1, 0x30, 0xfc, 0x04, 0x3d, 0x32, 0x1e, 0x5e, 0xd2, 0x34, 0x17,
	0x34, 0xcd, 0x59, 0xc9, 0x77, 0xd4, 0x79, 0x00, 0x30, 0xaf, 0x88, 0xd8, 0x0d, 0xbc, 0xc8, 0x27,
	0x5b, 0x27, 0xe1, 0x7b, 0x68, 0x93, 0xf1, 0x70, 0x94, 0x27, 0x6c, 0xbd, 0x3b, 0x11, 0x86, 0x56,
	0xaa, 0x59, 0x26, 0x8b, 0x85, 0xe1, 0x5a, 0x8d, 0x60, 0x72, 0x35, 0xfa, 0x50, 0x09, 0x9f, 0xd3,
	0xf5, 0xe4, 0x6a, 0x94, 0xa8, 0x66, 0x76, 0x89, 0x85, 0xd6, 0xd2, 0xe7, 0x91, 0x9d, 0x85, 0x85,
	0xe8, 0x25, 0xf4, 0x13, 0xf6, 0x83, 0x95, 0x25, 0x4b, 0xcc, 0x4c, 0xb0, 0xf7, 0xd7, 0x20, 0x6e,
	0x53, 0xc2, 0x77, 0xea, 0x7b, 0x19, 0xd2, 0xe9, 0x35, 0xe3, 0xbb, 0x7b, 0x2d, 0xf7, 0x80, 0x1b,
	0xe1, 0x1a, 0x98, 0xc7, 0x97, 0x45, 0x3e, 0x2b, 0xfe, 0xf9, 0xf1, 0xe0, 0xb7, 0x07, 0x87, 0x7a,
	0xc4, 0x8f, 0xa0, 0xf3, 0x6d, 0x91, 0x50, 0xc1, 0x4c, 0x26, 0x25, 0x58, 0xc7, 0x67, 0x7e, 0x6c,
	0xf7, 0x25, 0xfc, 0xaf, 0x26, 0x1a, 0xbd, 0x10, 0x57, 0xda, 0x9b, 0xc4, 0x27, 0xd0, 0x23, 0x6c,
	0xca, 0xd2, 0x15, 0xb3, 0xeb, 0xd9, 0xae, 0x9b, 0x70, 0x8b, 0xfb, 0x10, 0x3a, 0x86, 0xab, 0x7b,
	0xaf, 0x2e, 0x55, 0xd8, 0xe4, 0x3d, 0x86, 0xbe, 0x2e, 0xfe, 0x85, 0xad, 0x85, 0x16, 0xae, 0xee,
	0x55, 0xd8, 0xa4, 0x3e, 0x87, 0xff, 0x8d, 0xa1, 0xad, 0x05, 0xeb, 0xc7, 0xcd, 0x8d, 0x6b, 0x3e,
	0x89, 0x01, 0xc9, 0xf1, 0xef, 0xad, 0x3a, 0x86, 0x93, 0x2d, 0xbe, 0x56, 0xae, 0xfe, 0x0d, 0xd5,
	0x12, 0x35, 0xf9, 0xcf, 0xe0, 0x8e, 0xbc, 0xd9, 0xd7, 0xc1, 0x2b, 0xb8, 0x5b, 0xd3, 0xf7, 0x76,
	0xf1, 0xfd, 0x48, 0xfd, 0x85, 0x5f, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0xda, 0xb8, 0xd8, 0xe5,
	0x94, 0x05, 0x00, 0x00,
}
