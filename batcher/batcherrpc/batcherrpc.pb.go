// Code generated by protoc-gen-go. DO NOT EDIT.
// source: batcherrpc.proto

/*
Package batcherrpc is a generated protocol buffer package.

It is generated from these files:
	batcherrpc.proto

It has these top-level messages:
	RPCRecord
	RPCCausality
	RPCRecords
	RPCReply
	RPCQueues
*/
package batcherrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RPCRecord struct {
	Id        string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Timestamp int64             `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Host      uint32            `protobuf:"varint,3,opt,name=host" json:"host,omitempty"`
	Seqid     int64             `protobuf:"varint,4,opt,name=seqid" json:"seqid,omitempty"`
	Depth     uint32            `protobuf:"varint,5,opt,name=depth" json:"depth,omitempty"`
	Tags      map[string]string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Trace     string            `protobuf:"bytes,7,opt,name=trace" json:"trace,omitempty"`
	// for TOID record
	Lid       uint32        `protobuf:"varint,8,opt,name=lid" json:"lid,omitempty"`
	Toid      uint32        `protobuf:"varint,9,opt,name=toid" json:"toid,omitempty"`
	Causality *RPCCausality `protobuf:"bytes,10,opt,name=causality" json:"causality,omitempty"`
}

func (m *RPCRecord) Reset()                    { *m = RPCRecord{} }
func (m *RPCRecord) String() string            { return proto.CompactTextString(m) }
func (*RPCRecord) ProtoMessage()               {}
func (*RPCRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RPCRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RPCRecord) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RPCRecord) GetHost() uint32 {
	if m != nil {
		return m.Host
	}
	return 0
}

func (m *RPCRecord) GetSeqid() int64 {
	if m != nil {
		return m.Seqid
	}
	return 0
}

func (m *RPCRecord) GetDepth() uint32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *RPCRecord) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RPCRecord) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

func (m *RPCRecord) GetLid() uint32 {
	if m != nil {
		return m.Lid
	}
	return 0
}

func (m *RPCRecord) GetToid() uint32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

func (m *RPCRecord) GetCausality() *RPCCausality {
	if m != nil {
		return m.Causality
	}
	return nil
}

type RPCCausality struct {
	Host uint32 `protobuf:"varint,1,opt,name=host" json:"host,omitempty"`
	Toid uint32 `protobuf:"varint,2,opt,name=toid" json:"toid,omitempty"`
}

func (m *RPCCausality) Reset()                    { *m = RPCCausality{} }
func (m *RPCCausality) String() string            { return proto.CompactTextString(m) }
func (*RPCCausality) ProtoMessage()               {}
func (*RPCCausality) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RPCCausality) GetHost() uint32 {
	if m != nil {
		return m.Host
	}
	return 0
}

func (m *RPCCausality) GetToid() uint32 {
	if m != nil {
		return m.Toid
	}
	return 0
}

type RPCRecords struct {
	Records []*RPCRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *RPCRecords) Reset()                    { *m = RPCRecords{} }
func (m *RPCRecords) String() string            { return proto.CompactTextString(m) }
func (*RPCRecords) ProtoMessage()               {}
func (*RPCRecords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RPCRecords) GetRecords() []*RPCRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type RPCReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *RPCReply) Reset()                    { *m = RPCReply{} }
func (m *RPCReply) String() string            { return proto.CompactTextString(m) }
func (*RPCReply) ProtoMessage()               {}
func (*RPCReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RPCReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RPCQueues struct {
	Version uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Queues  []string `protobuf:"bytes,2,rep,name=queues" json:"queues,omitempty"`
}

func (m *RPCQueues) Reset()                    { *m = RPCQueues{} }
func (m *RPCQueues) String() string            { return proto.CompactTextString(m) }
func (*RPCQueues) ProtoMessage()               {}
func (*RPCQueues) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RPCQueues) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RPCQueues) GetQueues() []string {
	if m != nil {
		return m.Queues
	}
	return nil
}

func init() {
	proto.RegisterType((*RPCRecord)(nil), "RPCRecord")
	proto.RegisterType((*RPCCausality)(nil), "RPCCausality")
	proto.RegisterType((*RPCRecords)(nil), "RPCRecords")
	proto.RegisterType((*RPCReply)(nil), "RPCReply")
	proto.RegisterType((*RPCQueues)(nil), "RPCQueues")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BatcherRPC service

type BatcherRPCClient interface {
	ReceiveRecord(ctx context.Context, in *RPCRecord, opts ...grpc.CallOption) (*RPCReply, error)
	ReceiveRecords(ctx context.Context, in *RPCRecords, opts ...grpc.CallOption) (*RPCReply, error)
	UpdateQueue(ctx context.Context, in *RPCQueues, opts ...grpc.CallOption) (*RPCReply, error)
	TOIDReceiveRecord(ctx context.Context, in *RPCRecord, opts ...grpc.CallOption) (*RPCReply, error)
	TOIDReceiveRecords(ctx context.Context, in *RPCRecords, opts ...grpc.CallOption) (*RPCReply, error)
	TOIDUpdateQueue(ctx context.Context, in *RPCQueues, opts ...grpc.CallOption) (*RPCReply, error)
}

type batcherRPCClient struct {
	cc *grpc.ClientConn
}

func NewBatcherRPCClient(cc *grpc.ClientConn) BatcherRPCClient {
	return &batcherRPCClient{cc}
}

func (c *batcherRPCClient) ReceiveRecord(ctx context.Context, in *RPCRecord, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/BatcherRPC/ReceiveRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batcherRPCClient) ReceiveRecords(ctx context.Context, in *RPCRecords, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/BatcherRPC/ReceiveRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batcherRPCClient) UpdateQueue(ctx context.Context, in *RPCQueues, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/BatcherRPC/UpdateQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batcherRPCClient) TOIDReceiveRecord(ctx context.Context, in *RPCRecord, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/BatcherRPC/TOIDReceiveRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batcherRPCClient) TOIDReceiveRecords(ctx context.Context, in *RPCRecords, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/BatcherRPC/TOIDReceiveRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batcherRPCClient) TOIDUpdateQueue(ctx context.Context, in *RPCQueues, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := grpc.Invoke(ctx, "/BatcherRPC/TOIDUpdateQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BatcherRPC service

type BatcherRPCServer interface {
	ReceiveRecord(context.Context, *RPCRecord) (*RPCReply, error)
	ReceiveRecords(context.Context, *RPCRecords) (*RPCReply, error)
	UpdateQueue(context.Context, *RPCQueues) (*RPCReply, error)
	TOIDReceiveRecord(context.Context, *RPCRecord) (*RPCReply, error)
	TOIDReceiveRecords(context.Context, *RPCRecords) (*RPCReply, error)
	TOIDUpdateQueue(context.Context, *RPCQueues) (*RPCReply, error)
}

func RegisterBatcherRPCServer(s *grpc.Server, srv BatcherRPCServer) {
	s.RegisterService(&_BatcherRPC_serviceDesc, srv)
}

func _BatcherRPC_ReceiveRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatcherRPCServer).ReceiveRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BatcherRPC/ReceiveRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatcherRPCServer).ReceiveRecord(ctx, req.(*RPCRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatcherRPC_ReceiveRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatcherRPCServer).ReceiveRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BatcherRPC/ReceiveRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatcherRPCServer).ReceiveRecords(ctx, req.(*RPCRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatcherRPC_UpdateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCQueues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatcherRPCServer).UpdateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BatcherRPC/UpdateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatcherRPCServer).UpdateQueue(ctx, req.(*RPCQueues))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatcherRPC_TOIDReceiveRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatcherRPCServer).TOIDReceiveRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BatcherRPC/TOIDReceiveRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatcherRPCServer).TOIDReceiveRecord(ctx, req.(*RPCRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatcherRPC_TOIDReceiveRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatcherRPCServer).TOIDReceiveRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BatcherRPC/TOIDReceiveRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatcherRPCServer).TOIDReceiveRecords(ctx, req.(*RPCRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatcherRPC_TOIDUpdateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCQueues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatcherRPCServer).TOIDUpdateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BatcherRPC/TOIDUpdateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatcherRPCServer).TOIDUpdateQueue(ctx, req.(*RPCQueues))
	}
	return interceptor(ctx, in, info, handler)
}

var _BatcherRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BatcherRPC",
	HandlerType: (*BatcherRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveRecord",
			Handler:    _BatcherRPC_ReceiveRecord_Handler,
		},
		{
			MethodName: "ReceiveRecords",
			Handler:    _BatcherRPC_ReceiveRecords_Handler,
		},
		{
			MethodName: "UpdateQueue",
			Handler:    _BatcherRPC_UpdateQueue_Handler,
		},
		{
			MethodName: "TOIDReceiveRecord",
			Handler:    _BatcherRPC_TOIDReceiveRecord_Handler,
		},
		{
			MethodName: "TOIDReceiveRecords",
			Handler:    _BatcherRPC_TOIDReceiveRecords_Handler,
		},
		{
			MethodName: "TOIDUpdateQueue",
			Handler:    _BatcherRPC_TOIDUpdateQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "batcherrpc.proto",
}

func init() { proto.RegisterFile("batcherrpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x49, 0xd2, 0xb5, 0xf3, 0x29, 0x1d, 0xc3, 0x9a, 0x90, 0x35, 0x71, 0x11, 0x45, 0x13,
	0xb2, 0x06, 0xca, 0x45, 0x91, 0x00, 0x21, 0x71, 0x43, 0xe1, 0x82, 0x2b, 0x86, 0x35, 0x1e, 0xc0,
	0x8b, 0x8f, 0x5a, 0x8b, 0x76, 0xc9, 0x6c, 0xb7, 0x52, 0xdf, 0x83, 0x57, 0xe2, 0xbd, 0x90, 0xed,
	0xfc, 0x69, 0x85, 0x84, 0x76, 0x77, 0xbe, 0xe3, 0x2f, 0xc7, 0xbf, 0x7c, 0x39, 0x81, 0xf3, 0x3b,
	0xe9, 0xaa, 0x15, 0x1a, 0xd3, 0x54, 0x65, 0x63, 0x6a, 0x57, 0x17, 0x7f, 0x52, 0x20, 0xe2, 0x66,
	0x21, 0xb0, 0xaa, 0x8d, 0xa2, 0x67, 0x90, 0x6a, 0xc5, 0x92, 0x3c, 0xe1, 0x44, 0xa4, 0x5a, 0xd1,
	0x97, 0x40, 0x9c, 0xde, 0xa0, 0x75, 0x72, 0xd3, 0xb0, 0x34, 0x4f, 0x78, 0x26, 0x86, 0x06, 0xa5,
	0x30, 0x5a, 0xd5, 0xd6, 0xb1, 0x2c, 0x4f, 0xf8, 0x4c, 0x84, 0x9a, 0x5e, 0xc0, 0x89, 0xc5, 0x07,
	0xad, 0xd8, 0x28, 0xb8, 0xa3, 0xf0, 0x5d, 0x85, 0x8d, 0x5b, 0xb1, 0x93, 0x60, 0x8d, 0x82, 0x72,
	0x18, 0x39, 0xb9, 0xb4, 0x6c, 0x9c, 0x67, 0x7c, 0x3a, 0xbf, 0x28, 0x7b, 0x8e, 0xf2, 0x56, 0x2e,
	0xed, 0xd7, 0x7b, 0x67, 0xf6, 0x22, 0x38, 0xfc, 0xf3, 0xce, 0xc8, 0x0a, 0xd9, 0x24, 0xa0, 0x45,
	0x41, 0xcf, 0x21, 0x5b, 0x6b, 0xc5, 0x4e, 0xc3, 0x4c, 0x5f, 0x7a, 0x22, 0x57, 0x6b, 0xc5, 0x48,
	0x24, 0xf2, 0x35, 0x7d, 0x0d, 0xa4, 0x92, 0x5b, 0x2b, 0xd7, 0xda, 0xed, 0x19, 0xe4, 0x09, 0x9f,
	0xce, 0x67, 0xfe, 0xaa, 0x45, 0xd7, 0x14, 0xc3, 0xf9, 0xe5, 0x7b, 0x20, 0xfd, 0xdd, 0x7e, 0xfe,
	0x2f, 0xdc, 0xb7, 0x71, 0xf8, 0xd2, 0x73, 0xec, 0xe4, 0x7a, 0x8b, 0x21, 0x0b, 0x22, 0xa2, 0xf8,
	0x98, 0x7e, 0x48, 0x8a, 0x77, 0xf0, 0xf4, 0x70, 0x66, 0x9f, 0x4d, 0x72, 0x90, 0x4d, 0x47, 0x97,
	0x0e, 0x74, 0xc5, 0x1c, 0xa0, 0x7f, 0x6d, 0x4b, 0xaf, 0x60, 0x62, 0x62, 0xc9, 0x92, 0x10, 0x0a,
	0x0c, 0xa1, 0x88, 0xee, 0xa8, 0xb8, 0x82, 0xd3, 0xd0, 0x6d, 0xd6, 0x7b, 0xca, 0x60, 0xb2, 0x41,
	0x6b, 0xe5, 0x12, 0x5b, 0xce, 0x4e, 0x16, 0x9f, 0xc2, 0x87, 0xfd, 0xb1, 0xc5, 0x2d, 0x5a, 0x6f,
	0xdb, 0xa1, 0xb1, 0xba, 0xbe, 0x6f, 0x89, 0x3a, 0x49, 0x5f, 0xc0, 0xf8, 0x21, 0x78, 0x58, 0x9a,
	0x67, 0x9c, 0x88, 0x56, 0xcd, 0x7f, 0xa7, 0x00, 0x9f, 0xe3, 0xb6, 0x88, 0x9b, 0x05, 0xe5, 0x30,
	0x13, 0x58, 0xa1, 0xde, 0x61, 0xbb, 0x2a, 0x07, 0x64, 0x97, 0xa4, 0xec, 0x78, 0x8a, 0x27, 0xf4,
	0x1a, 0xce, 0x8e, 0x9c, 0x96, 0x4e, 0x07, 0xab, 0x3d, 0xf6, 0xbe, 0x82, 0xe9, 0xcf, 0x46, 0x49,
	0x87, 0x01, 0x33, 0xce, 0x8c, 0xc4, 0xc7, 0xbe, 0x37, 0xf0, 0xfc, 0xf6, 0xfb, 0xb7, 0x2f, 0x8f,
	0x24, 0x28, 0x81, 0xfe, 0xe3, 0xfe, 0x1f, 0xc5, 0x35, 0x3c, 0xf3, 0xfe, 0xc7, 0x90, 0xdc, 0x8d,
	0xc3, 0x6f, 0xf3, 0xf6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x76, 0xd1, 0xf5, 0xa7, 0x4a, 0x03,
	0x00, 0x00,
}
